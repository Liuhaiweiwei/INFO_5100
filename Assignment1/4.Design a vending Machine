Design a vending Machine(will accept coins of different denominations and vends out candies, soda etc)

Customer can:
1.drop coins into a vending machine
2.choose what they want to buy
3.get their change back
-------------------------------------------------------------------
Class:Customer
State:cost,totalValue
Behaviour:dropCoins(Coin coins){
    this.totalValue=coins.totalValue
    CoinsInfo=coins.checkDenomination(coins.denomination,coins.totalValue)
}
Behaviour:chooseCommodity(name,num){
    Commodity commodities=new Commodity.get(name);
    if(commodities.checkAvailability(commodities)){
        this.cost=commodities.price*num;
    }else{
        return "not enough num"
    }
}
Behaviour:getChange(Customer customer){
    if(customer.cost<customer.totalValue){
        changeValue=customer.totalValue-customer.cost
    }else if(customer.cost>customer.totalValue){
        throw new Exception("money not enough");
    }
}
-------------------------------------------------------------------
Class:Coin
State:denomination,totalValue
Behaviour:checkDenomination(denomination,totalValue){
    List<Coin> coins=Coin.getAllCoins();
    int i=0;
    while(i<coins.size()){
        //vending machine can accept one dollar,fifty cents,quarter dollar,five cents and one cents
        if(Coin.get(denomination)==1) totalValue+=1;
        if(Coin.get(denomination)==0.5) totalValue+=0.5;
        if(Coin.get(denomination)==0.25) totalValue+=0.25;
        if(Coin.get(denomination)==0.05) totalValue+=0.05;
        if(Coin.get(denomination)==0.01) totalValue+=0.01;
        }
    return totalValue;
}
-------------------------------------------------------------------
Class:Commodity
State:name,price,amount
Behaviour:checkAvailability(Commodity commodities,num){
    if(num<=commodities.amount){
        return true;
    }else{
        return false;
    }
}