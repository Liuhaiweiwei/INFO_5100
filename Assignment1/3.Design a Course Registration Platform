Design a Course Registration Platform

student can:
1.log in
2.search course information
3.register courses
4.cancel course registration
5.get notifications if they register or cancel courses successfully
--------------------------------------------------
Class:student
State:studentId,name,email
Behaviour:searchCourses(Course course){
    List<Courses> courses=registrationService.search(course.name,course.level,course.date,course.gradeMode,course.hours);
    return courses;
}
Behaviour:registerCourse(){
    registerInfo=registrationService.registerCourse(courseId,studentId);
}
Behaviour:cancelCourse(){
    registrationService.cancelCourse(courseId,studentId);
}
--------------------------------------------------
Class:Course
State:courseId,name,level,date,gradeMode,hours,RegisterNum,MaxNum
Behaviour:boolean checkAvailability(courseId,RegisterNum,MaxNum){
    if(RegisterNum<=MaxNum){
        registrationService.sendEmail(studentId,email);
        return true;
    }else{
        throw new Exception("Registration failed");
        return false;
    }
}
--------------------------------------------------
Class:registrationService
Behaviour:search(name,level,date,gradeMode,hours){
    List<Courses> courses=Course.getAllCourse();
    List<Courses> searchResult=new List<>();
    //search by name,level,date,gradeMode,hours together
    for(int i=0;i<courses.size();i++){
        if(!courses.get(i).equals(name) continue;
        if(!courses.get(i).equals(level) continue;
        if(!courses.get(i).equals(date) continue;
        if(!courses.get(i).equals(gradeMode) continue;
        if(!courses.get(i).equals(hours) continue;
        searchResult.add(courses.get(i));
    }
}

Behaviour:search(name){
    List<Courses> courses=Course.getAllCourse();
    List<Courses> searchResult=new List<>();
    //search by name
    for(int i=0;i<courses.size();i++){
        if(courses.get(i).equals(name){
            searchResult.add(courses.get(i));
        }
    }
    //The steps for searching by a single property are the same as above
}

Behaviour:registerCourse(courseId,studentId){
    Course course=new Course(courseId)
    if(course.checkAvailability()==true){
        RegisterNum=course.RegisterNum+1;
        //let student know they register successfully
        registrationService.sendEmail(studentId,email);
    }else{
        throw new Exception("Registration failed");
    }
}

Behaviour:sendEmail(studentId,email){
    //send email to student to let them know they have registered successfully
}

Behaviour:cancelCourse(courseId,studentId){
    Course course=new Course(courseId)
    RegisterNum=course.RegisterNum-1;
    //let student know they cancel course successfully
    registrationService.sendEmail(studentId,email);
}
