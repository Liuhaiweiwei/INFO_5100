/**
 * Complete all TODO
 * Submit before 22nd September 12:00pm
 */
public class Assignment2 {
    private static final String ORGANISATION = "Northeastern";
    private static final String[] STRS = new String[] {
            //firstname,lastname,age,salary,email,designation
            "John,Doe,24,5400,johndoe@gmail.com,Engineer",
            "Sara,Jones,26,6300,sarajones@gmail.com,TechnicalRecruiter",
            "Noah,Trevor,32,5300,noahtrevor@gmail.com,Writer",
            "Jill,Meyer,34,6800,jillmeyer@gmail.com,Manager",
            "Chris,Strat,36,7600,chrisstrat@gmail.com,Director",
            "Ching,Chi,25,4000,chingchi@gmail.com,Developer",
            "Yue,Hui,28,4900,yuehui@gmail.com,Tester",
            "Amit,Agarwal,27,5700,yuehui@gmail.com,SeniorDeveloper",
            "Tianyu,Wang,26,4500,tianyuwang@gmail.com,Researcher",
            "Ram,Menon,29,5700,rammenon@gmail.com,DataScientist"
    };

    private final Employee[] employees = new Employee[10];

    class Employee implements Comparable<Employee> {
        private String firstName;
        private String lastName;
        private int age;
        private int salary;
        private String email;
        private String designation;
        private String org;

        Employee(String firstName, String lastName, int age, int salary, String email, String designation, String org) {
            // @TODO
            // initialize all members here
            this.firstName=firstName;
            this.lastName=lastName;
            this.age=age;
            this.salary=salary;
            this.email=email;
            this.designation=designation;
            this.org=org;
        }

        // generate getter setters for all Employee members

        @Override
        public int compareTo(Employee employee) {
            // @TODO
            // compare employee by their salary, if salaries are equal, compare by age

            //Salary sorted from low to high
            if(this.salary>employee.salary){
                return 1;
            }else if(this.salary<employee.salary){
                return -1;
            }else{
                if(this.age>employee.age){
                    return 1;
                }else if(this.age>employee.age){
                    return -1;
                }
            }
            return 0;
        }

        @Override
        public boolean equals(Employee employee) {
            // @TODO
            // implement equals for Employee
            if(this.firstName.length()==employee.firstName.length()){
                return true;
            }else{
                return false;
            }
        }

        @Override
        public int hashCode(Employee employee) {
            // @TODO
            // implement hashcode for employee
            return employee.designation.hashCode();
        }
    }

    public void initializeEmployees() {
        // @TODO
        // use STRS to create employee objects and store them in employees array
        Employee employee_1=new Employee("John","Doe",24,5400,"johndoe@gmail.com","Engineer",null);
        Employee employee_2=new Employee("Sara","Jones",26,6300,"sarajones@gmail.com","TechnicalRecruiter",null);
        Employee employee_3=new Employee("Noah","Trevor",32,5300,"noahtrevor@gmail.com","Writer",null);
        Employee employee_4=new Employee("Jill","Meyer",34,6800,"jillmeyer@gmail.com","Manager",null);
        Employee employee_5=new Employee("Chris","Strat",36,7600,"chrisstrat@gmail.com","Director",null);
        Employee employee_6=new Employee("Ching","Chi",25,4000,"chingchi@gmail.com“,”Developer",null);
        Employee employee_7=new Employee("Yue","Hui",28,4900,"yuehui@gmail.com","Tester",null);
        Employee employee_8=new Employee("Amit","Agarwal",27,5700,"yuehui@gmail.com","SeniorDeveloper",null);
        Employee employee_9=new Employee("Tianyu","Wang",26,4500,"tianyuwang@gmail.com","Researcher",null);
        Employee employee_10=new Employee("Ram","Menon",29,5700,"rammenon@gmail.com","DataScientist",null);
        Employee[] temp=new Employee[]{employee_1,employee_2,employee_3,employee_4,employee_5,employee_6,employee_7,employee_8,employee_9,employee_10};
        employees=temp;
    }

    public int sumOfSalariesGreaterThanFiveThousands() {
        // @TODO
        // calculate the sum of salaries of employees having salary greater than 5000
        int sum=0;
        for(int i=0;i<employees.length;i++){
            if(employees[i].salary>5000){
                sum+=employees[i].salary;
            }else{
                continue;
            }
        }
        return sum;
    }

    public void swapSalaries() {
        // @TODO
        // swap salary of even numbered employee with odd numbered employee
        // swap salary of employees[0] with employees[1], employees[2] with employees[3] and so on..
        int i=0;
        while(i<employees.length-1){
            int temp=employees[i].salary;
            employees[i].salary=employees[i+1].salary;
            employees[i+1].salary=temp;
            i=i+2;
        }
    }

    public void customSort() {
        // @TODO
        // sort employees array on the basis of firstName and print
        for(Employee employee : employees) {
            Arrays.sort(employees,(a,b)->a.firstName-b.firstName);
            System.out.println(employee.firstName);
        }

        // @TODO
        // sort employees array on the basis of age and print

        for(Employee employee : employees) {
            Arrays.sort(employees,(a,b)->a.age-b.age);
            System.out.println(employee.age);
        }
    }

    public static void main(String[] args) {
        Assignment2 assignment2 = new Assignment2();
        // you can verify/test your code here
    }

}